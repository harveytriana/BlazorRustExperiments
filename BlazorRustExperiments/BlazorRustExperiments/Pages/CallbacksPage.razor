@page "/callback-sample"
@implements IDisposable

<PageTitle>Calling Rust</PageTitle>
<h3>Running Rust process with callback</h3>
<hr />
<Board @ref="board" Card=false />

@code {
    public delegate float Fn(float x);

    [DllImport(RLIB)] static extern float execute_fn_f32(Fn handle, float x);
    [DllImport(RLIB)] static extern float cube(float x);
    [DllImport(RLIB)] static extern float square(float x);

    Board board;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            await RunSamples();
        }
    }

    async Task RunSamples()
    {
        float x = 7.0F;

        board.Add("**CALLBACKS");
        board.Add("Passing a rust funcion as parameter of a Rust function");
        board.Add(string.Format("execute(square, {0})  : {1}", x, execute_fn_f32(square,x)));
        board.Add(string.Format("execute(cube, {0})    : {1}", x, execute_fn_f32(cube, x)));
        
        // for pass a C# as parameter need works with pointers (unsafe)
        ExecuteFunctions.Echo += Notify;
        ExecuteFunctions.Run();

        board.Add("");
        board.Add("**EVENTS");
        board.Add("Look activity at the browser console output", "coral");
        board.Add("Processing...", "red");

        // display content
        await Task.Delay(600);

        // Experimental
        CallbackEvent.Echo += Notify;
        CallbackEvent.RunEvents();

        board.Add("Once again...", "red");

        await InvokeAsync(StateHasChanged);
        await Task.Delay(600);

        CallbackEvent.RunEvents();

        board.Add("END");
    }

    async Task Notify(string message)
    {
        Console.WriteLine("Echo: {0}", message);
        board.Add(message);

        await Task.Delay(0);
    }

    public void Dispose()
    {
        ExecuteFunctions.Echo -= Notify;
        CallbackEvent.Echo -= Notify;
    }
}