@page "/rst-1"
@using System.Runtime.InteropServices

<PageTitle>Calling Rust Functions</PageTitle>

<h3>Calling Rust Experiments</h3>
<hr />
<Board @ref="board" />

@code {
    const string RUSTLIB = "librstlib";

    [DllImport(RUSTLIB)] static extern void greeting();

    [DllImport(RUSTLIB)] static extern float hypotenuse(float x, float y);

    [DllImport(RUSTLIB)] static extern int counter();

    [DllImport(RUSTLIB)] static extern void print_string([MarshalAs(UnmanagedType.LPUTF8Str)] string text);
    // OR **
    // [DllImport(RUSTLIB)] static extern void print_string(byte[] utf8Text);

    [DllImport(RUSTLIB)] static extern IntPtr string_test();

    [DllImport(RUSTLIB)] static extern IntPtr describe_person(int age);

    Board board;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            RunSamples();
        }
    }

    void RunSamples()
    {
        board.Add("Calling Rust functions\n");

        greeting(); // console output

        var x = 7;
        var y = 11;
        var h = hypotenuse(x, y);

        board.Add(string.Format("From Rust Library: Hypotenuse({0}, {1}) = {2}\n", x, y, h));

        board.Add("COUNTER");
        board.Add("An internal variable in Rust library is changing");
        board.Add(counter().ToString());
        board.Add(counter().ToString());
        board.Add(counter().ToString());

        // STRINGS
        // ---------------------------------------------------------
        board.Add("\nSTRINGS");
        board.Add("Send a text to Rust library. See console output.");
        print_string("■ Hello from Blazor");

        board.Add("\nSupports extended characters");
        print_string("« Sin música, la vida sería un error »");

        // ** ok: but moore complexity
        // print_string("« Esto es un árbol »".Utf8Text());

        // getting a string from lib
        board.Add("\nGet a string from library");

        var p = string_test();
        var text = Marshal.PtrToStringUTF8(p);
        // OR
        // var text = p.TextFromPointer();

        board.Add(string.Format("String pointer      : {0}", p));
        board.Add(string.Format("String dereferenced : {0}", text));

        // another funtion that returns a string
        var age = 18;
        var desc = describe_person(age); // this is a pointer
        board.Add(string.Format("describe_person(18) : {0}", desc.TextFromPointer()));
    }
}
