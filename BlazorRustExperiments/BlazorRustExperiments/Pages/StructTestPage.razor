@page "/struct-test"
@using System.Runtime.InteropServices
@using System.Text.Json

<PageTitle>Calling Rust Functions - Struct</PageTitle>

<h3>Struct Test</h3>
<hr />
<Board @ref="board" />

@code {
    const string RUSTLIB = "librstlib";

    record struct Parallelepiped(float length, float width, float height);

    [DllImport(RUSTLIB)] static extern IntPtr get_parallelepiped_ptr();
    [DllImport(RUSTLIB)] static extern float get_parallelepiped_volume(Parallelepiped p);

    Board board;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            RunSamples();
        }
    }

    void RunSamples()
    {
        board.Add("Calling Rust functions\n");
        board.Add("STRUCT SAMPLE","gold");
        try {
            var pointer = get_parallelepiped_ptr();
            var parallelepiped = Marshal.PtrToStructure<Parallelepiped>(pointer);
            var volume = get_parallelepiped_volume(parallelepiped);
            // show it
            board.Add(string.Format("Length : {0}", parallelepiped.length));
            board.Add(string.Format("Width  : {0}", parallelepiped.width));
            board.Add(string.Format("Height : {0}", parallelepiped.height));
            board.Add(string.Format("Volume : {0:N2}", volume));
        }
        catch (Exception exception) {// not fired
            board.Add("Exception: " + exception.Message);
        }
    }
}
