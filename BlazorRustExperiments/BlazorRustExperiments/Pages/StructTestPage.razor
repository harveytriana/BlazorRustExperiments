@page "/struct-test"
@using System.Runtime.InteropServices

<PageTitle>Calling Rust Functions - Struct</PageTitle>

<h3>Struct Test</h3>
<hr />
<Board @ref="board" />

@code {
    record struct Parallelepiped(float length, float width, float height);

    [DllImport(Global.RLIB)] static extern IntPtr get_parallelepiped_ptr();
    [DllImport(Global.RLIB)] static extern float get_parallelepiped_volume(Parallelepiped p);

    // CALLBACKS
    delegate int Fn(int number);

    [DllImport(Global.RLIB)] static extern int c_operation(int number, Fn fn);
    [DllImport(Global.RLIB)] static extern int cube(int number);
    [DllImport(Global.RLIB)] static extern int square(int number);

    // EVENTS
    public delegate void RaiseNumber(int number);

    [DllImport(Global.RLIB)] static extern void UnmanagedPrompt(RaiseNumber cppCallback);

    Board board;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            RunSamples();
        }
    }

    void RunSamples()
    {
        board.Add("**SAMPLE");

        var structPointer = get_parallelepiped_ptr();
        var parallelepiped = Marshal.PtrToStructure<Parallelepiped>(structPointer);
        var volume = get_parallelepiped_volume(parallelepiped);

        // show it
        board.Add($"Get pointer       : {structPointer}");
        board.Add($"Marshal to Struct : {parallelepiped}");
        board.Add($"Length            : {parallelepiped.length:N2}");
        board.Add($"Width             : {parallelepiped.width:N2}");
        board.Add($"Height            : {parallelepiped.height:N2}\n");
        board.Add("Call a rest function get_parallelepiped_volume(...)", "brown");
        board.Add($"Volume            : {volume:N2}");
        // callbacks
        board.Add("\nCALLBACKS", "darkmagenta");
        board.Add("passing a C# function as parameter of Rust function");
        board.Add($"c_operation(5, square) : {c_operation(5, square)}");
        board.Add($"c_operation(7, cube)   : {c_operation(7, cube)}");
    }
}
