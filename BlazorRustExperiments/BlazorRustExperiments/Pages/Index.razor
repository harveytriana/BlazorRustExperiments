@page "/"
@using System.Runtime.InteropServices

<PageTitle>Calling Rust Functions</PageTitle>

<h3>Calling Rust Experiments</h3>
<hr />
<p>Look at the console output in browser development tools</p>
<pre>@echo</pre>

@code {
    const string RUSTLIB = "librstlib";

    [DllImport(RUSTLIB)] static extern void greeting();

    [DllImport(RUSTLIB)] static extern float hypotenuse(float x, float y);

    [DllImport(RUSTLIB)] static extern int counter();

    [DllImport(RUSTLIB)] static extern void print_string([MarshalAs(UnmanagedType.LPUTF8Str)] string text);
    // OR **
    // [DllImport(RUSTLIB)] static extern void print_string(byte[] utf8Text);

    [DllImport(RUSTLIB)] static extern IntPtr string_test();

    [DllImport(RUSTLIB)] static extern IntPtr describe_person(int age);

    string echo = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Echo("Calling Rust functions\n");
        await Task.Delay(500);

        greeting(); // console output

        var x = 7;
        var y = 11;
        var h = hypotenuse(x, y);

        Echo(string.Format("From Rust Library: Hypotenuse({0}, {1}) = {2}\n", x, y, h));

        Echo("COUNTER");
        Echo("An internal variable in Rust library is changing");
        Echo(counter().ToString());
        Echo(counter().ToString());
        Echo(counter().ToString());

        // STRINGS
        // ---------------------------------------------------------
        Echo("\nSTRINGS");
        Echo("Send a text to Rust library. See console output.");
        print_string("■ Hello from Blazor");

        Echo("\nSupports extended characters");
        print_string("« Sin música, la vida sería un error »");

        // ** ok: but moore complexity
        // print_string("« Esto es un árbol »".Utf8Text());

        // getting a string from lib
        Echo("\nGet a string from library");

        var p = string_test();
        var text = Marshal.PtrToStringUTF8(p);
        // OR
        // var text = p.TextFromPointer();

        Echo(string.Format("String pointer      : {0}", p));
        Echo(string.Format("String dereferenced : {0}", text));

        // another funtion that returns a string
        var age = 18;
        var desc = describe_person(age); // this is a pointer
        Echo(string.Format("describe_person(18) : {0}", desc.TextFromPointer()));
    }

    void Echo(string? message = null)
    {
        if (message is null)
            echo = string.Empty;
        else {
            echo += $"{message}\n";
            StateHasChanged();
        }
    }
}
