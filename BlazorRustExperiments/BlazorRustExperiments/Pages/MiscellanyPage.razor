@page "/miscellany"

<PageTitle>Calling Rust</PageTitle>
<h3>Calling Rust Miscellany</h3>
<Board @ref="board" />

@code {
    [DllImport(RLIB)] static extern void hello_world();
    [DllImport(RLIB)] static extern float hypotenuse(float x, float y);
    [DllImport(RLIB)] static extern int counter();

    // STRINGS
    [DllImport(RLIB)] static extern IntPtr reverse_inptr([MarshalAs(UnmanagedType.LPUTF8Str)] string text);
    // Second optuion
    [DllImport(RLIB)] static extern IntPtr reverse_inptr(byte[] utf8Text);

    // STRUCTURES
    record struct Parallelepiped(float length, float width, float height);
    [DllImport(RLIB)] static extern IntPtr get_parallelepiped_ptr();
    [DllImport(RLIB)] static extern float get_parallelepiped_volume(Parallelepiped p);

    Board board;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            Miscellany();
        }
    }

    void Miscellany()
    {
        board.Print("**HELLO WORLD");
        hello_world();
        board.Print("See the browser console output\n", "coral");

        board.Print("**CALLING A MATH FUNCTION");
        float x = 9, y = 11, h = hypotenuse(x, y);
        board.Print(string.Format("From Rust Library, Hypotenuse({0}, {1}) = {2}\n", x, y, h));

        // STRINGS
        // ---------------------------------------------------------
        board.Print("**STRINGS FUNCTION");
        board.Print("Send a string to Rust as get an string as result");

        var quote = "« All that we see or seem is but a dream within a dream. » E.A.P.";
        var p = reverse_inptr(quote);
        var quoteReversed = p.TextFromPointer();

        board.Print("Quote:");
        board.Print(quote, "brown");
        board.Print("Reversed Quote:");
        board.Print(quoteReversed, "brown");

        var bytes = quote.TextToBytes();
        var quotePtr = reverse_inptr(bytes);
        quoteReversed = p.TextFromPointer();

        board.Print($"Bytes {bytes.Length}");
        board.Print("Reversed Quote:");
        board.Print(quoteReversed, "brown");

        board.Print("\n**STRUCTURES");

        var structPointer = get_parallelepiped_ptr();
        var parallelepiped = Marshal.PtrToStructure<Parallelepiped>(structPointer);
        var volume = get_parallelepiped_volume(parallelepiped);

        // show it
        board.Print($"Get pointer       : {structPointer}");
        board.Print($"Marshal to Struct : {parallelepiped}");
        board.Print($"Length            : {parallelepiped.length:N2}");
        board.Print($"Width             : {parallelepiped.width:N2}");
        board.Print($"Height            : {parallelepiped.height:N2}\n");
        board.Print("Call a rust function passing a C# struct as parameter");
        board.Print($"Volume            : {volume:N2}");

        board.Print("**\bCOUNTER FROM EMULATED CLOSURE");
        board.Print($"Counter: {counter()}");
        board.Print($"Counter: {counter()}");
        board.Print($"Counter: {counter()}");
        board.Print($"Counter: {counter()}");
        board.Print($"Counter: {counter()}\n");
    }
}
