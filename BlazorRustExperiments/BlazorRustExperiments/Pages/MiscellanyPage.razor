@page "/miscellany"
@using System.Runtime.InteropServices

<PageTitle>Calling Rust Functions</PageTitle>

<h3>Calling Rust Experiments</h3>
<hr />
<Board @ref="board" />

@code {
    [DllImport(Global.RLIB)] static extern void hello_world();

    [DllImport(Global.RLIB)] static extern float hypotenuse(float x, float y);

    [DllImport(Global.RLIB)] static extern int counter();

    [DllImport(Global.RLIB)] static extern void print_string([MarshalAs(UnmanagedType.LPUTF8Str)] string text);
    // OR **
    // [DllImport(Global.RLIB)] static extern void print_string(byte[] utf8Text);

    [DllImport(Global.RLIB)] static extern IntPtr get_some_string();

    [DllImport(Global.RLIB)] static extern IntPtr describe_person(int age);

    Board board;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            Miscellany();
        }
    }

    void Miscellany()
    {
        hello_world(); // console output

        board.Add("**CALLING MATH FUNCTION");
        float x = 9, y = 11, h = hypotenuse(x, y);
        board.Add(string.Format("From Rust Library, Hypotenuse({0}, {1}) = {2}\n", x, y, h));

        board.Add("**COUNTER FROM CLOSURE");
        board.Add($"Counter: {counter()}");
        board.Add($"Counter: {counter()}");
        board.Add($"Counter: {counter()}");
        board.Add($"Counter: {counter()}");
        board.Add($"Counter: {counter()}\n");

        // STRINGS
        // ---------------------------------------------------------
        board.Add("**SENDING STRINGS");
        board.Add("Send a string to Rust (with extended characters)");

        var s = "« Quien descubre el quién soy descubrirá el quién eres » Neruda";

        board.Add($"print_string('{s}')", "brown");
        print_string(s);
        board.Add("See the browser console output\n", "coral");

        // ** ok: but moore complexity
        // print_string("« Esto es un árbol »".Utf8Text());

        // getting a string from lib
        board.Add("**GETTING STRINGS");

        var ptr = get_some_string();
        var text = Marshal.PtrToStringUTF8(ptr);
        // OR
        // var text = p.TextFromPointer();

        board.Add($"String pointer : {ptr}");
        board.Add($"Dereferenced   : {text}\n");

        board.Add("**STRING FUNCTION");
        var age = 18;
        var desc = describe_person(age); // this is a pointer
        board.Add(string.Format("describe_person(age: 18) : {0}", desc.TextFromPointer()));
    }


}
