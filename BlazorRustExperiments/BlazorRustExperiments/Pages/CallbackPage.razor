@page "/callback-sample"
@using System.Runtime.InteropServices
@implements IDisposable

<h3>Running Rust process with callback</h3>
<hr />
<p>Look at the console output in browser development tools</p>
<Board @ref="board" Card=false />

@code {
    delegate int Fn(int number);

    [DllImport(Global.RLIB)] static extern int c_operation(int number, Fn fn);
    [DllImport(Global.RLIB)] static extern int cube(int number);
    [DllImport(Global.RLIB)] static extern int square(int number);

    Board board;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            await RunSamples();
        }
    }

    async Task RunSamples()
    {
        board.Add("**CALLBACKS");
        board.Add("passing a Rust function as parameter of Rust function...", "brown");
        board.Add($"c_operation(5, square) : {c_operation(5, square)}");
        board.Add($"c_operation(7, cube)   : {c_operation(7, cube)}\n");

        board.Add("**EVENTS");
        board.Add("Processing...", "red");
        
        // display content
        await Task.Delay(600);

        // Experimental
        CallbackExperiment.Echo += Notify;
        CallbackExperiment.Run();

        board.Add("\nOnce again...", "red");

        await InvokeAsync(StateHasChanged);
        await Task.Delay(600);

        CallbackExperiment.Run();

        board.Add("\nReady", "cadetblue");
    }

    async Task Notify(string message)
    {
        Console.WriteLine("Echo: {0}", message);
        board.Add(message);

        await Task.Delay(0);
    }

    public void Dispose()
    {
        CallbackExperiment.Echo -= Notify;
    }
}